// parameters for the model used in this code are foung at https://icwww.epfl.ch/~gerstner/SPNM/node14.html#SECTION02122200000000000000

#include "pch.h"
#include <iostream>
#include <fstream>
#include <math.h>
#include<stdio.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>
#include <iomanip>
#include <array>
#include <cstdlib>
#include <cmath>
#include <chrono>

using namespace std;

int i, j, k, n, a, c;
float x, y, z, t, f;
float u;
float I[100000];
float dt = 0.01;  //in ms
float N, M, H;
//float N[3];
//float M[3];
//float H[3];
float aN, bN, aM, bM, aH, bH;
float dN_dt, dM_dt, dH_dt, du_dt;

const float gNa = 120;
const float gK = 36;
const float gL = 0.3;

const float ENa = 115;
const float EK = -12;
const float EL = 10.6;

int main()
{

	for (i = 0; i <= 20; i++) {
		I[i] = i; // current is in microamps
	}

	for (k = 0; k <= 20; k++) { //different currents being tested
		u = 0;  // reset voltage, time, firing frequency
		t = 0;
		b = 0;
		for (i = 0; i < 100000; i++) {  // 1 s / dt = 1000 ms / 0.01 ms = 100000 time steps
      
      // calculatE the alpha and beta of each gating variable
			aN = (0.1 - (0.01 * u)) / (exp(1 - (0.1 * u)) - 1);
			bN = 0.125 * exp(-u / 80);

			aM = (2.5 - (0.1 * u))/ (exp(2.5 - (0.1 * u)) - 1);
			bM = 4 * exp(-u / 18);

			aH = 0.07 * exp(-u / 20);
			bH = 1 / (exp(3 - (0.1 * u)) + 1);

			dN_dt = (aN * (1 - N)) - (bN * N);  // calculating the rate of change of the gating variables
			dM_dt = (aM * (1 - M)) - (bM * M);
			dH_dt = (aH * (1 - H)) - (bH * H);

			N += (dN_dt * dt);  // dx_dt * dt = dx, therefore: x new = x old + dx
			M += (dM_dt * dt);
			H += (dH_dt * dt);

			x = gNa * pow(M, 3) * H * (u - ENa); //	calcuate the currents for the individual channels
			y = gK * pow(N, 4) * (u - EK);
			z = gL * (u - EL);

			du_dt = I[k] - x - y - z; // Calc\ulate the rate of change of the voltage
			u = u + (du_dt * dt); // du_dt * dt = du, therefore: u new = u old + du (Euler's First order approximation)
			//cout << u << endl;
      
			t += dt;
			if (u < 30) { // there is no spike, reset state variable a
				a = 0;
			}
			if (u > 30) { // if there there is a spike
				if ((1 - a) > 0) { // when there is a state change from 0 to 1 only
					f++;  // number of times the neuron spiked increments +1
				}
				a = 1;  // changes state variable a to 1
			}
		}
		cout << f << endl;  // firing frequency = # times the neuron spiked / 1 sec = [hz]
	}

}
